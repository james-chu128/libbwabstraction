const char* bake_hairline_cs_glsl = 
"#version 450 core                                                      \n"
"                                                                       \n"
"layout(binding = 0) uniform isampler2D inputMap;                       \n"
"layout(binding = 1) uniform isampler2D patchIDMap;                     \n"
"                                                                       \n"
"layout(rgba8, binding = 0) uniform image2D outputMap;                  \n"
"                                                                       \n"
"layout(location = 0) uniform int radius;                               \n"
"                                                                       \n"
"layout(std430, binding = 0) buffer Label                               \n"
"{                                                                      \n"
"    int labels[];                                                      \n"
"};                                                                     \n"
"                                                                       \n"
"layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;       \n"
"                                                                       \n"
"void main(void)                                                        \n"
"{                                                                      \n"
"    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);                       \n"
"    bool found = false;                                                \n"
"    int pid = texelFetch(patchIDMap, pos, 0).x;                        \n"
"    float radius_f = float(radius);                                    \n"
"    if(pid < 0)                                                        \n"
"    {                                                                  \n"
"        return;                                                        \n"
"    }                                                                  \n"
"    for(int i = -radius; i <= radius; ++i)                             \n"
"    {                                                                  \n"
"        for(int j = -radius; j <= radius; ++j)                         \n"
"        {                                                              \n"
"            ivec2 diff = ivec2(i, j);                                  \n"
"            ivec2 pos2 = pos + diff;                                   \n"
"            float diff_len = length(diff);                             \n"
"            int linePid = texelFetch(inputMap, pos2, 0).x;             \n"
"            // boundary line                                           \n"
"            if(diff_len <= radius_f && linePid == pid)                 \n"
"            {                                                          \n"
"                found = true;                                          \n"
"                break;                                                 \n"
"            }                                                          \n"
"            // feature line                                            \n"
"            else if(diff_len <= radius_f * 0.5 && linePid == -pid - 1) \n"
"            {                                                          \n"
"                found = true;                                          \n"
"                break;                                                 \n"
"            }                                                          \n"
"        }                                                              \n"
"    }                                                                  \n"
"    if(bool(labels[pid]) ^^ found)                                     \n"
"    {                                                                  \n"
"        imageStore(outputMap, pos, vec4(vec3(1.0), 1.0));              \n"
"    }                                                                  \n"
"    else                                                               \n"
"    {                                                                  \n"
"        imageStore(outputMap, pos, vec4(vec3(0.0), 1.0));              \n"
"    }                                                                  \n"
"}                                                                      \n";

const char* featureline_fs_glsl = 
"#version 410 core                            \n"
"                                             \n"
"layout(location = 0) out int featureLineOut; \n"
"                                             \n"
"void main(void)                              \n"
"{                                            \n"
"    featureLineOut = 1;                      \n"
"}                                            \n";

const char* featureline_vs_glsl = 
"#version 410 core                            \n"
"                                             \n"
"layout(location = 0) in vec3 position;       \n"
"                                             \n"
"uniform mat4 mvp;                            \n"
"                                             \n"
"void main(void)                              \n"
"{                                            \n"
"    gl_Position = mvp * vec4(position, 1.0); \n"
"}                                            \n";

const char* triangleid_fs_glsl = 
"#version 410 core                            \n"
"                                             \n"
"layout(location = 0) out int primitiveIDOut; \n"
"                                             \n"
"void main(void)                              \n"
"{                                            \n"
"    primitiveIDOut = gl_PrimitiveID;         \n"
"}                                            \n";

const char* triangleid_vs_glsl = 
"#version 410 core                            \n"
"                                             \n"
"layout(location = 0) in vec3 position;       \n"
"                                             \n"
"uniform mat4 mvp;                            \n"
"                                             \n"
"void main(void)                              \n"
"{                                            \n"
"    gl_Position = mvp * vec4(position, 1.0); \n"
"}                                            \n";

